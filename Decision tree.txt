
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn import tree
from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.tree import plot_tree

data = load_wine()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['label'] = data.target
df.head()


X = df.iloc[:, :-1]
y = df.iloc[:, -1]


clf = DecisionTreeClassifier()

param_distributions = {
    "max_depth": [3, None],
    "max_features": range(1, 11),
    "min_samples_split": range(2, 11),
    "criterion": ['gini', 'entropy'],
}


random_search = RandomizedSearchCV(clf, param_distributions=param_distributions, n_iter=10, cv=5)
random_search.fit(X, y)

random_search.best_estimator_


random_search.best_params_

random_search.best_score_

random_search.cv_results_

param_grid = {
    "max_depth": [3, None],
    "max_features": [1, 3, 10],
    "min_samples_split": [2, 3, 10],
    "criterion": ["gini", "entropy"],
}


grid_search = GridSearchCV(clf, param_grid=param_grid, cv=5)
grid_search.fit(X, y)

grid_search.best_estimator_

best_params = grid_search.best_params_
best_params

grid_search.best_score_

X_train, X_test, y_train, y_test = train_test_split(X, y)

Better_model = DecisionTreeClassifier(criterion = "entropy",
                                      max_depth = None,
                                      max_features = 10,
                                      min_samples_split = 3)
Better_model.fit(X_train, y_train)

y_pred = Better_model.predict(X_test)

plt.figure(figsize=(80, 50))
plot_tree(Better_model, filled=True, feature_names=data.feature_names, class_names=data.target_names)
plt.title("Decision Tree for Wine Classification", fontsize=60)
plt.show()

accuracy_score(y_test, y_pred)

confusion_matrix(y_test, y_pred)


